{
	"info": {
		"_postman_id": "fdfd0d7d-51e8-4e13-922e-d8743ef1ebde",
		"name": "trello collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17970488"
	},
	"item": [
		{
			"name": "Create Board",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"test for default value of permissionLevel \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.prefs.permissionLevel).to.contain(\"private\");\r",
							"});\r",
							"pm.test(\"test for default value of canBePublic \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.prefs.canBePublic).to.be.true;\r",
							"});\r",
							"pm.test(\"test for default value of canInvite \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.prefs.canBePublic).to.be.true;\r",
							"});\r",
							"pm.test(\"check for closed default value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.closed).to.be.false;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{URL}}/1/boards/?name={{name's board}}&key={{key}}&token={{token}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"1",
						"boards",
						""
					],
					"query": [
						{
							"key": "name",
							"value": "{{name's board}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET boards",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"board above 1 test case\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.boards.length).to.be.above(1);\r",
							"});\r",
							"pm.globals.set(\"FirstBoardID\",pm.response.json().boards[0].id);\r",
							"pm.globals.set(\"LastBoardID\",pm.response.json().boards[pm.response.json().boards.length-1].id);\r",
							"console.log(pm.globals.get(\"FirstBoardID\"));\r",
							"console.log(pm.globals.get(\"LastBoardID\"));\r",
							"\r",
							"pm.test(\"Assertion for FirstBoardID \", function () {\r",
							"    pm.expect(pm.response.json().boards[0].id).to.include(pm.globals.get(\"FirstBoardID\"));\r",
							"});\r",
							"pm.test(\"Assertion for LastBoardID \", function () {\r",
							"    pm.expect(pm.response.json().boards[pm.response.json().boards.length-1].id).to.include(pm.globals.get(\"LastBoardID\"));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}/1/members/me?boards=open&key={{key}}&token={{token}}",
					"host": [
						"{{URL}}"
					],
					"path": [
						"1",
						"members",
						"me"
					],
					"query": [
						{
							"key": "boards",
							"value": "open"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET all Lists",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"verfiy that 3 lists in this board\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length).to.eql(3);\r",
							"});\r",
							"pm.test(\"TO DO existing check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[0].name).to.equals(\"To Do\");\r",
							"});\r",
							"pm.test(\"Doing existing check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[1].name).to.equals(\"Doing\");\r",
							"});\r",
							"pm.test(\"DONE existing check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData[2].name).to.equals(\"Done\");\r",
							"});\r",
							"\r",
							"pm.globals.set(\"FirstListID\",pm.response.json()[1].id);\r",
							"pm.globals.set(\"LastListID\",pm.response.json()[pm.response.json().length-1].id);\r",
							"console.log(pm.globals.get(\"FirstListID\"));\r",
							"console.log(pm.globals.get(\"LastListID\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}1/boards/:id/lists?key={{key}}&token={{token}}",
					"host": [
						"{{URL}}1"
					],
					"path": [
						"boards",
						":id",
						"lists"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{FirstBoardID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"id existing check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id).to.be.exist;\r",
							"});\r",
							"pm.test(\"name existing check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.name).to.be.exist;\r",
							"});\r",
							"pm.test(\"idBoard existing check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.idBoard).to.be.exist;\r",
							"});\r",
							"pm.test(\"closed key check to be false check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.closed).to.be.false;\r",
							"});\r",
							"pm.test(\"limits key check to be empty check\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.limits).to.be.empty;\r",
							"});\r",
							"pm.globals.set(\"ListID\", pm.response.json().id);\r",
							"console.log(pm.globals.get(\"ListID\"));"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{URL}}1/lists?name={{names's list}}&idBoard={{FirstBoardID}}&key={{key}}&token={{token}}",
					"host": [
						"{{URL}}1"
					],
					"path": [
						"lists"
					],
					"query": [
						{
							"key": "name",
							"value": "{{names's list}}"
						},
						{
							"key": "idBoard",
							"value": "{{FirstBoardID}}"
						},
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "GET lists by ListID",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{URL}}1/lists/:id?key={{key}}&token={{token}}",
					"host": [
						"{{URL}}1"
					],
					"path": [
						"lists",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{ListID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PUT Archive or un-archive a list",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Your list is archieved\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.closed).to.be.true;\r",
							"});\r",
							"pm.test(\"Your list is not archieved\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.closed).to.be.false;\r",
							"});\r",
							"pm.test(\"check for set cookies header\", function () {\r",
							"    var jsonData = pm.response.headers;\r",
							"    pm.expect(jsonData.get(\"Set-Cookie\")).to.includes(\"isEnterpriseAdmin%3Dfalse\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"value\":true\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{URL}}1/lists/:id/closed?key={{key}}&token={{token}}",
					"host": [
						"{{URL}}1"
					],
					"path": [
						"lists",
						":id",
						"closed"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{FirstListID}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "DELETE boards by BoardID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"deletion test case\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData._value).to.includes(\"board is removed successfully\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{URL}}1/boards/:id?key={{key}}&token={{token}}",
					"host": [
						"{{URL}}1"
					],
					"path": [
						"boards",
						":id"
					],
					"query": [
						{
							"key": "key",
							"value": "{{key}}"
						},
						{
							"key": "token",
							"value": "{{token}}"
						}
					],
					"variable": [
						{
							"key": "id",
							"value": "{{FirstBoardID}}"
						}
					]
				}
			},
			"response": []
		}
	]
}